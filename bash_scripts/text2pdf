#!/usr/bin/python3
import os.path
import argparse
import PyQt5.QtWidgets as Qw
import PyQt5.QtGui as Qg
import PyQt5.QtPrintSupport as Qp


def findBestFontSize(linesize, pageRect, fontname, margin=5):
    size = 14
    while True:
        font = Qg.QFont(fontname, size)
        sansLineHeight = Qg.QFontMetrics(font).height()
        sansLineWidth  = (Qg.QFontMetrics(font).width('A') * linesize)
        if pageRect.width() < sansLineWidth:
            size = size - 1
        else:
            break
    return size

            
def make_pdf(afile, orientation='portait', encoding='utf-8'):
    # fontname = "Courier"
    fontname = "Monospace"
    with open(afile, encoding=encoding) as afi:
        lines = list(afi)
    *fname, postfix = afile.split('.')
    fname = '.'.join(fname + ['pdf'])
    # Here starts
    printer = Qp.QPrinter()
    printer.setPageSize(Qp.QPrinter.A4)
    printer.setOutputFileName(fname)
    printer.setOutputFormat(Qp.QPrinter.PdfFormat)
    if orientation == 'landscape':
        printer.setOrientation(Qp.QPrinter.Landscape)
    pageRect = printer.pageRect()
    LeftMargin = 30
    bestSize = findBestFontSize(
        max([len(i) for i in lines]), pageRect, fontname)
    font = Qg.QFont(fontname, bestSize)
    # font.setStyleHint(Qg.QFont.TypeWriter)
    sansLineHeight = Qg.QFontMetrics(font).height()
    painter = Qg.QPainter(printer)
    page = 1
    y = 20
    for line in lines:
        painter.save()
        painter.setFont(font)
        y += sansLineHeight
        x = LeftMargin
        try:
            painter.drawText(x, y, line)
        except:
            painter.drawText(x,y,'CodePage error !!!')
        if y > (pageRect.height() - 54) :
            printer.newPage()
            y = 20
        painter.restore()
    painter.end()


if __name__ == '__main__':
    pars = argparse.ArgumentParser(description='Convert text to pdf')
    pars.add_argument('file', help='Text FILE to be converted')
    pars.add_argument('-e', '--Encoding', help='Encoding of file')
    pars.add_argument('-o', '--Orientation', help='portrait or landscape')
    pars.add_argument('--version', action='version', version='1.0')
    args = pars.parse_args()
    if not os.path.isfile(args.file):
        print('No such file : %s' % args.file)
    else:
        app = Qw.QApplication([])
        ret = make_pdf(args.file, args.Orientation, args.Encoding)
        