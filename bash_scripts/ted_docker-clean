#!/bin/bash
# Maintained by Sean Kilgarriff and Killian Brackey at ZZROT Design
#
# The MIT License (MIT)
# Copyright © 2016 ZZROT LLC <docker@zzrot.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

#ENVIRONMENT VARIABLES

# @info:	Docker-clean current version
declare VERSION="1.3.1"

# @info:	Required Docker version for Volume functionality
declare REQUIRED_VERSION="1.9.0"

# @info:	Boolean for storing Docker version info
declare HAS_VERSION=false

# @info: Boolean for verbose mode
declare VERBOSE=false

#FUNCTIONS

# @info:    Parses and validates the CLI arguments
# @args:	Global Arguments $@
parseCli(){

	if [ "$#" -eq 0 ]; then
		dockerClean
	elif [[ $# -eq 2 ]]; then

		case $2 in
			-l | --log) VERBOSE=true ;;
		esac
		flagOptions $1;

		#statements
	elif [[ $# -eq 1 ]]; then
		flagOptions $1
	else
		usage
	fi
}

function flagOptions() {
	case $1 in
		-l | --log)
								VERBOSE=true
		 						dockerClean ;;
		-s | --stop) stop ;;
		-v | --version) version ;;
		-c | --containers) dockerClean 1 ;;
		-i | --images) dockerClean 2 ;;
		-a | --all) dockerClean 3 ;;
		-h | --help | *) usage ;;
	esac
}

# @info:	Prints out Docker-clean current version
function version {
	echo $VERSION
}

# @info:	Prints out usage
function usage {
  echo
	echo "Options:"
  echo "-h or --help        Opens this help menu"
  echo "-v or --version     Prints the current docker-clean version"
  echo
  echo "-a or --all         Stops and removes all Containers, Images, and Restarts docker"
  echo "-c or --containers  Stops and removes Stopped and Running Containers"
  echo "-i or --images      Stops and removes all Containers and Images"
	echo "-s or --stop        Stops all running Containers"
	echo
	echo "-l or --log         Adding this as an additional flag will list all"
	echo "                    image, volume, and container deleting output"
}

# @info:	Prints out 3-point version (000.000.000) without decimals for comparison
# @args:	Docker Version of the client
function printVersion {
     echo "$@" | awk -F. '{ printf("%03d%03d%03d\n", $1,$2,$3); }';
 }

# @info:	Checks Docker Version and then configures the HAS_VERSION var.
 function checkVersion  {
     local Docker_Version="$(docker --version | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')"
     if [ $(printVersion "$Docker_Version") -gt $(printVersion "$REQUIRED_VERSION") ]; then
         HAS_VERSION=true
     else
         echo "Your Version of Docker is below 1.9.0 which is required for full functionality."
         echo "Please upgrade your Docker daemon. Until then, the Volume processing will not work."
				 exit 1
     fi
 }

# @info:	Checks to see if Docker is installed and connected
 function checkDocker {
     #Run Docker ps to make sure that docker is installed
     #As well as that the Daemon is connected.
     docker ps &>/dev/null
     DOCKER_CHECK=$?

     #If Docker Check returns 1 (Error), send a message and exit.
     if [ ! "$DOCKER_CHECK" ]; then
         echo "Docker is either not installed, or the Docker Daemon is not currently connected."
         echo "Please check your installation and try again."
         exit 1;
     fi
 }

# @info: Stops all running docker containers.
function stop {
	runningContainers="$(docker ps -q)"
	if [ ! "$runningContainers" ]; then
		echo No running containers!
	else
		echo Stopping running containers...
		docker stop --time=10 $runningContainers
	fi
}

# @info:	Removes all stopped docker containers.
function cleanContainers {
    stoppedContainers="$(docker ps -qf STATUS=exited )"
		createdContainers="$(docker ps -qf STATUS=created)"
		stopped_count=$(count "$stoppedContainers")
		created_count=$(count "$createdContainers")
    if [ ! "$stoppedContainers" ]; then
        echo No Containers To Clean!
    else
				echo Cleaning containers...
				docker rm $stoppedContainers 2>&1 | log
				echo Stopped containers cleaned: $stopped_count
    fi

		if [ "$createdContainers" ]; then
			docker rm $createdContainers 2>&1 | log
			echo Created containers cleaned: $created_count
		fi
}

# @info:	Removes all containers (including running) with force.
function cleanAllContainers {
	allContainers="$(docker ps -a -q)"
	container_count=$(count "$allContainers")
	if [ ! "$allContainers" ]; then
		echo No Containers To Clean!
	else
		echo Cleaning containers...
		docker rm -f $allContainers 2>&1 | log
		echo Containers cleaned: $container_count
	fi
}

# @info:	Removes all untagged docker images.
#Credit goes to http://jimhoskins.com/2013/07/27/remove-untagged-docker-images.html
function cleanImages {
		# Commented is for older version docker, has a few bugs
		# with parent/child images
    #untaggedImages="$(docker images -a | grep "^<none>" | awk '{print $3}')"
		untaggedImages="$(docker images -aq --filter "dangling=true")"
		image_count=$(count "$untaggedImages")
		if [ ! "$untaggedImages" ]; then
        echo No Untagged Images!
    else
				echo Cleaning Images...
				docker rmi -f $untaggedImages 2>&1 | log
				echo Images cleaned: $image_count
    fi
}

# @info:	Deletes all Images including tagged
function cleanAllImages {
	listedImages="$(docker images -a -q)"
	image_count=$(count "$listedImages")
	if [ ! "$listedImages" ]; then
		echo No Images to Delete!
	else
		echo Cleaning Images...
		tryCount=0
		while [[ "$listedImages" && $tryCount -lt 5 ]]; do
			((tryCount+=1))
			docker rmi -f $listedImages 2>&1 | log
			listedImages="$(docker images -a -q)"
		done
		echo Images cleaned: $image_count
	fi
}

# @info:	Removes all Dangling Docker Volumes.
function cleanVolumes {
    danglingVolumes="$(docker volume ls -qf dangling=true)"
		volume_count=$(count "$danglingVolumes")
    if [ ! "$danglingVolumes" ]; then
        echo No Dangling Volumes!
    else
				echo Cleaning volumes...
        docker volume rm $danglingVolumes 2>&1 | log
				echo Volumes cleaned: $volume_count
    fi
}

# @info:	Restarts and reRuns docker-machine env active machine
function restartMachine {
	operating_system=$(testOS)
	if [[ $operating_system =~ "mac" || $operating_system =~ 'windows' ]]; then
		active="$(docker-machine active)"
		docker-machine restart $active
		eval $(docker-machine env $active)
		echo Running docker-machine env $active...
		echo "New IP Address for" $active ":" $(docker-machine ip)
	elif [[ $operating_system =~ "linux" ]]; then
		echo Restarting Docker...
		echo Restarting this service requires sudo privileges
		sudo service docker restart
	else
		echo It appears your OS is not compatible with our docker engine restart
		echo Windows compatibility work in progress
		echo It you feel you are seeing this as an error please visit
		echo "https://github.com/ZZROTDesign/docker-clean and open an issue."
		exit 2
	fi
}

# @info:	Runs the checks before the main code can be run.
function Check {
	checkDocker
	checkVersion
}

# @info:	Default run option, cleans stopped containers and images
# @args:	1 = Force Clean all Containers, 2 = Force Clean Containers and Images. 3 = Force Clean Containers, Images, and Restart
function dockerClean {

	if [ "$1" == 1 ]; then
		cleanAllContainers
		cleanImages
	elif [ "$1" == 2 ]; then
		cleanAllContainers
		cleanAllImages
	elif [ "$1" == 3 ]; then
		cleanAllContainers
		cleanAllImages
	else
		cleanContainers
		cleanImages
	fi

	#Check if Has Version
	if [ $HAS_VERSION == true ]; then
	    cleanVolumes
	fi

	#This should be after cleaning the Volumes hence the seperation.
	if [ "$1" == 3 ]; then
		restartMachine
	fi

}

# @info: counts length of string passed in
function count {
		toCount="$1"
    length=${#toCount}
		## Works on OSX, Linux, but not Travis CI
		#number_of_occurrences=$(grep -o "" <<< "$toCount" | wc -l)

    if [[ $length != 0 ]]; then
      number_of_occurrences=$(($length % 12 + 1))
		fi
		echo $number_of_occurrences
}

function log {
	read IN
	if [[ $VERBOSE == true ]]; then
		echo $IN
	fi
}

## ** Script for testing os **
# Credit https://stackoverflow.com/questions/3466166/how-to-check-if-running-in-cygwin-mac-or-linux/17072017#17072017?newreg=b1cdf253d60546f0acfb73e0351ea8be
# Echo mac for Mac OS X, echo linux for GNU/Linux, echo windows for Window
function testOS {
  if [ "$(uname)" == "Darwin" ]; then
      # Do something under Mac OS X platform
      echo mac
  elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
      # Do something under GNU/Linux platform
      echo linux
  elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
      # Do something under Windows NT platform
      echo windows
  fi
}
#END FUNCTIONS


# @info:	Main function
Check
parseCli "$@"
exit 0
