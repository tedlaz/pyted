#!/usr/bin/python2
# *- coding: utf-8 -*
# Δίνουμε ημερολόγιο εγγραφών γενικής λογιστικής και
# ημερολόγιο εγγραφών εσόδων-εξόδων και μας επιστρέφει
# sqlite database με τις εγγραφές !!!
import sqlite3

sql_create = '''PRAGMA user_version = 1963;
CREATE TABLE IF NOT EXISTS lmo(
id INTEGER PRIMARY KEY,
lmo TEXT NOT NULL UNIQUE,
lmop TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS tr(
id INTEGER PRIMARY KEY,
dat DATE NOT NULL,
par TEXT NOT NULL,
trp TEXT
);
CREATE TABLE IF NOT EXISTS trd(
id INTEGER PRIMARY KEY,
id_tr INTEGER NOT NULL,
id_lmo INTEGER NOT NULL,
xr NUMERIC NOT NULL DEFAULT 0,
pi NUMERIC NOT NULL DEFAULT 0
);
CREATE TABLE IF NOT EXISTS ee(
id INTEGER PRIMARY KEY,
dat DATE NOT NULL,
teg TEXT NOT NULL,
typ INTEGER NOT NULL DEFAULT 0,
par TEXT NOT NULL,
afm TEXT,
lmo TEXT,
aji NUMERIC NOT NULL DEFAULT 0,
fpa NUMERIC NOT NULL DEFAULT 0,
eee INTEGER NOT NULL DEFAULT 1,
maji NUMERIC NOT NULL DEFAULT 0,
mfpa NUMERIC NOT NULL DEFAULT 0,
note TEXT NOT NULL DEFAULT 'normal'
);
CREATE TABLE IF NOT EXISTS eet(
hm DATE PRIMARY KEY,
es NUMERIC NOT NULL DEFAULT 0,
ej NUMERIC NOT NULL DEFAULT 0,
vs NUMERIC NOT NULL DEFAULT 0,
vj NUMERIC NOT NULL DEFAULT 0
);
CREATE TABLE IF NOT EXISTS eee(
id INTEGER PRIMARY KEY,
eeep TEXT NOT NULL UNIQUE
);
INSERT INTO eee VALUES (0, 'Άκυρες');
INSERT INTO eee VALUES (1, 'Εσωτερικού');
INSERT INTO eee VALUES (2, 'Ενδοκοινοτικές');
INSERT INTO eee VALUES (3, 'Εξωτερικού');
INSERT INTO eee VALUES (6, 'Ομάδα 6 χωρίς ΦΠΑ');
CREATE VIEW vtr_trd as
SELECT tr.id, tr.par, tr.dat, lmo.lmo, lmo.lmop, trd.xr, trd.pi
From trd
inner join lmo on trd.id_lmo=lmo.id
inner join tr on tr.id=trd.id_tr;

CREATE VIEW vee_perday AS
SELECT dat,
CASE WHEN typ=1 THEN sum(aji) ELSE 0 end AS esoda,
CASE WHEN typ=2 THEN sum(aji) ELSE 0 end AS ejoda,
CASE WHEN typ=1 THEN sum(fpa) ELSE 0 end AS fpaes,
CASE WHEN typ=2 THEN sum(fpa) ELSE 0 end AS fpaej
FROM ee
GROUP BY dat
ORDER BY dat;

CREATE VIEW ee_total AS
SELECT typ, sum(aji), sum(fpa)
FROM ee
GROUP BY typ;

'''
sql_lmo = u"INSERT INTO lmo VALUES(%s, '%s', '%s');\n"
sql_tr = u"INSERT INTO tr VALUES(%s, '%s', '%s', '%s');\n"
sql_trd = u"INSERT INTO trd VALUES(%s, %s, %s, '%s', '%s');\n"
sql_eef = (u"INSERT INTO ee VALUES(%s, '%s', '%s', %s, '%s', '%s','%s', "
           "%s, %s, %s, %s, %s, '%s');\n")
sql_eet = u"INSERT INTO eet VALUES('%s', '%s', '%s', '%s', '%s');\n"

es = [u'ΤΠΛ', u'ΑΠΛ', u'ΤΠΥ', u'ΑΠΥ', u'ΠΙΣ', u'ΤΠΕ', u'ΕΠΛ']
ej = [u'ΛΟΙΠΑ', u'ΤΑΓ', u'ΠΑΓ', u'ΠΤΕ']
# Εξαιρέσεις από την τελική λίστα εγγραφών που δεν μας ενδιαφέρουν
ex = [u'ALPHA', u'EUROBANK', u'ΕΘΝΙΚΗ', u'ΑΛΦΑ',
      u'ΠΕΙΡΑΙΩΣ', u'ΜΙΣΘΟΔΟΣΙΑ', u'Μ.Κ.']


def isnum(val):
    try:
        float(val)
    except ValueError:
        return False
    else:
        return True


def iso_number_from_greek(num):
    num = num.strip()
    num = num.replace('.', '')
    num = num.replace(',', '.')
    return num


def iso_date_from_greek(dat):
    day, month, year = dat.split('/')
    return '%s-%s-%s' % (year, month, day)


def iso_num(num):
    num = num.strip()
    num = num.replace('.', '')
    num = num.replace(',', '.')
    return num


def iso_date(dat):
    day, month, year = dat.split('/')
    return '%s-%s-%s' % (year, month, day)


def iso_str(strval):
    tval = remove_simple_quotes(strval)
    return tval.strip()


def remove_simple_quotes(strval):
    retval = strval.strip()
    retval = retval.replace("'", '')
    return retval


def array_to_sql(arr, sql_template):
    sql = u''
    for el in arr:
        sql += sql_template % el
    # print(sql)
    return sql


PIN_ERROR, DB_ERROR, NULL_VAL, ONE_VAL, MANY_VAL = range(5)


def dbScript(pin):
    '''
    Generic sql script execution
    input
        script : one or many sql expressions divided by ;
        db  : database name
    output:
        1 if no error , 0 if error
        text message
    '''
    script = pin.get('script', None)
    db = pin.get('db', None)

    if (not script) or (not db):
        return {'status': PIN_ERROR,
                'msg': 'dbScript: script and/or db name are empty'}

    try:
        con = sqlite3.connect(db)  # @UndefinedVariable
        cur = con.cursor()
        cur.executescript(script)
        con.commit()
        status = NULL_VAL
        msg = 'dbScript: Everything executed Fine !!'
    except sqlite3.Error as e:
        if con:
            con.rollback()
        status = DB_ERROR
        msg = 'dbScript: %s' % e
    finally:
        cur.close()
        con.close()
    return {'status': status, 'msg': msg}


def parseel(elfile, encoding='WINDOWS-1253'):
    tr_no = 0  # id value for table tr
    trd_no = 0  # id value for table trd
    lmo_no = 0  # id value for table lmo
    lmo_no_last = 0  # Last inserted id for lmo
    lmoi = {}  # Dictionary of lmo
    dat = ''  # date for table tr
    par = ''  # par for table tr
    trp = ''  # per for table tr
    lmo = ''  # lmo for table lmo
    lmop = ''  # per for table lmo
    xr = ''  # xreosi for table trd
    pi = ''  # pistosi for table trd
    a_lmo = []
    a_tr = []
    a_trd = []
    with open(elfile) as afile:
        for linee in afile:
            line = linee.decode(encoding)
            # first check if linesize > 152
            if len(line) > 152:
                # Check if we have line with accoount code
                if line[50] == '.' and line[53] == '.':
                    pass
                else:
                    continue
                # Check fo date witch means we have first transaction line
                if line[4] == '/' and line[7] == '/':
                    tr_no += 1
                    dat = iso_date_from_greek(line[2:12])
                    par = remove_simple_quotes(line[22:48])
                    a_tr.append((tr_no, dat, par, trp))
                trd_no += 1
                lmo = line[48:60].strip()
                if lmo in lmoi:
                    lmo_no = lmoi[lmo]
                else:
                    lmop = remove_simple_quotes(line[77:122])
                    lmo_no_last += 1
                    lmo_no = lmo_no_last
                    lmoi[lmo] = lmo_no_last
                    a_lmo.append((lmo_no_last, lmo, lmop))
                xr = iso_number_from_greek(line[124:137])
                pi = iso_number_from_greek(line[139:152])
                a_trd.append((trd_no, tr_no, lmo_no, xr, pi))
    if not a_lmo:
        print(u'Το αρχείο με το ημερολόγιο λογιστικής είναι κενό ή λανθασμένο')
        return None
    return a_lmo, a_tr, a_trd


def parseef(eefile, encoding='WINDOWS-1253'):  # Τελικά θα παραμείνει αυτό ...
    tid = 0
    dat = ''
    teg = ''
    typ = 0
    par = ''
    afm = ''
    lmo = ''
    aji = 0
    fpa = 0
    eee = 1
    maji = 0
    mfpa = 0
    note = 'normal'
    a_eet = []
    with open(eefile) as afile:
        for line in afile:
            line = line.decode(encoding)
            # first check if linesize > 152
            lline = len(line)
            if lline == 45:
                dat = iso_date(line[32:42])
            tid = iso_str(line[1:8])
            if isnum(tid):
                teg = iso_str(line[9:34])
                if teg in es:
                    typ = 1
                elif teg in ej:
                    typ = 2
                else:
                    typ = 0
                par = iso_str(line[35:66])
                afm = line[67:76]
                if isnum(afm):
                    lmo = iso_str(line[77:91])
                else:
                    afm = ''
                    lmo = iso_str(line[67:91])
                aji = iso_num(line[92:112])
                fpa = iso_num(line[113:133])
                if float(aji) < 0:
                    maji = float(aji) * -1
                    mfpa = float(fpa) * -1
                    note = 'credit'
                else:
                    maji = aji
                    mfpa = fpa
                    note = 'normal'
                eee = 1
                for exep in ex:
                    if exep in par:
                        eee = 0
                        break
                a_eet.append((tid, dat, teg, typ, par, afm, lmo, aji, fpa,
                              eee, maji, mfpa, note))
    return a_eet


def parseee(eefile, encoding='WINDOWS-1253'):
    hm = ''  # date for table eet
    es = ''  # esoda for table eet
    ej = ''  # ejoda for table eet
    vs = ''  # fpa esodon
    vj = ''  # fpa eksodon
    a_eet = []
    with open(eefile) as afile:
        for linee in afile:
            line = linee.decode(encoding)
            # first check if linesize > 152
            if len(line) > 152:
                if line[53:66] == u'Σύνολα Εσόδων':
                    hm = iso_date_from_greek(line[31:41])
                    es = iso_number_from_greek(line[96:113])
                    vs = iso_number_from_greek(line[117:134])
                    # print('%s %s' % (hm, es))
                if line[53:66] == u'Σύνολα Εξόδων':
                    ej = iso_number_from_greek(line[96:113])
                    vj = iso_number_from_greek(line[117:134])
                    # print('%s %s %s' % (hm, es, ej))
                    a_eet.append((hm, es, ej, vs, vj))
    return a_eet


def create_sql(elfile, eefile):
    a_lmo, a_tr, a_trd = parseel(elfile)
    a_eef = parseef(eefile)
    # print(array_to_sql(a_eef, sql_eef))
    a_eet = parseee(eefile)
    sql = u'BEGIN TRANSACTION;\n'
    sql += array_to_sql(a_lmo, sql_lmo)
    sql += array_to_sql(a_tr, sql_tr)
    sql += array_to_sql(a_trd, sql_trd)
    sql += array_to_sql(a_eef, sql_eef)
    sql += array_to_sql(a_eet, sql_eet)
    sql += 'COMMIT TRANSACTION;'
    return sql


def run(elfile, eefile, dbname=None):
    if not dbname:
        imerol = elfile.split('.')
        dbname = '%s.sql3' % imerol[0]
    ret1 = dbScript({'script': sql_create, 'db': dbname})
    ret2 = dbScript({'script': create_sql(elfile, eefile), 'db': dbname})
    return '%s\n%s' % (ret1, ret2)


if __name__ == '__main__':
    import os.path
    import argparse
    pars = argparse.ArgumentParser(description='Parse text to sqlite3')
    pars.add_argument('elfile', help='Imerologio Text FILE to be parsed')
    pars.add_argument('eefile', help='Esoda-Ejoda Text FILE to be parsed')
    pars.add_argument('-o', '--Out', help='sqlite3 file name')
    pars.add_argument('-v', '--verbose', action='store_true',
                      help='output detailed messages')
    pars.add_argument('--version', action='version', version='2.0')
    args = pars.parse_args()
    if not os.path.isfile(args.elfile):
        print('No such file : %s' % args.elfile)
    elif not os.path.isfile(args.eefile):
        print('No such file : %s' % args.eefile)
    else:
        ret = run(args.elfile, args.eefile, args.Out)
        if args.verbose:
            print(ret)
